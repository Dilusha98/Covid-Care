/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Dashboard_Design;





import Main.DBConnection;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import com.fazecast.jSerialComm.SerialPort;
import com.fazecast.jSerialComm.SerialPortDataListener;
import com.fazecast.jSerialComm.SerialPortEvent;
import javax.swing.JComponent;
import java.awt.EventQueue;
import java.io.PrintWriter;


/**
 *
 * @author Darkheart
 */
public class IssueID_Design extends javax.swing.JPanel {

    private static Connection Conn = null;
    private Statement stmt = null;
    private PreparedStatement pst = null;
    private String sql = "";
    private ResultSet rs = null;
    private boolean Focus = false;
    private String s = null;
    private String path = null;
    private int randomCode;
    private Random rand = new Random();
    private final String DoseTaken = "Taken";
    private final String DoseNotTaken = "Not Taken";
    private String readline;
    public SerialPort comPort;
    private final String commPort = "COM3";
    private final int baudrate = 9600;
    private String rfid = "";
    private JLabel rftxt = new JLabel();   
    private String D01 = null;
    private String D02 = null;

            
    /**
     * Creates new form IssueID_Design
     */
    public IssueID_Design() {
        initComponents();
        Conn = DBConnection.getconn();
        DetailsPanel.setVisible(false);
        
        ClearBTN.setVisible(false);
        
        //initializeSerialPort();
        //connect();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IssueIDPanel = new javax.swing.JPanel();
        PrintIDBTN = new javax.swing.JButton();
        CheckIDBTN = new javax.swing.JButton();
        IDPanel = new javax.swing.JPanel();
        Vstatus = new javax.swing.JLabel();
        IDVaccine = new javax.swing.JLabel();
        IDno = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        IDpic = new com.raven.avatar.ImageAvatar();
        jPanel2 = new javax.swing.JPanel();
        IDName = new javax.swing.JLabel();
        IDTemp = new javax.swing.JLabel();
        ClearBTN = new javax.swing.JButton();
        Nic = new javax.swing.JTextField();
        NicLBL = new javax.swing.JLabel();
        IssueIDBTN = new javax.swing.JButton();
        DetailsPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Dnic = new javax.swing.JLabel();
        Dstatus = new javax.swing.JLabel();
        DfDate = new javax.swing.JLabel();
        DsDate = new javax.swing.JLabel();
        Dvname = new javax.swing.JLabel();
        AddImgBTN = new javax.swing.JButton();
        IssueIDBG = new javax.swing.JLabel();
        CheckIDPanel = new javax.swing.JPanel();
        TempID2 = new javax.swing.JLabel();
        BackChkIDBTN = new javax.swing.JButton();
        TestBTN = new javax.swing.JButton();
        MainWigdetLBL6 = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(new java.awt.CardLayout());

        IssueIDPanel.setOpaque(false);
        IssueIDPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PrintIDBTN.setText("Print ID");
        PrintIDBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PrintIDBTNMouseEntered(evt);
            }
        });
        PrintIDBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintIDBTNActionPerformed(evt);
            }
        });
        IssueIDPanel.add(PrintIDBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 190, 70, 30));

        CheckIDBTN.setText("Check");
        CheckIDBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CheckIDBTNMouseEntered(evt);
            }
        });
        CheckIDBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckIDBTNActionPerformed(evt);
            }
        });
        IssueIDPanel.add(CheckIDBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 150, 70, 30));

        IDPanel.setBackground(new java.awt.Color(255, 255, 255));
        IDPanel.setPreferredSize(new java.awt.Dimension(410, 211));
        IDPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Vstatus.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        Vstatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Vstatus.setText("");
        IDPanel.add(Vstatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 100, 50, -1));

        IDVaccine.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        IDVaccine.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        IDVaccine.setText("");
        IDVaccine.setAutoscrolls(true);
        IDVaccine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IDPanel.add(IDVaccine, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 120, 50, -1));

        IDno.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        IDno.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        IDno.setText("");
        IDPanel.add(IDno, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 80, 50, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel2.setText("Status");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel1.setText("ID");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel3.setText("Vaccine");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, -1));

        IDPanel.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 120, 140));

        IDpic.setBackground(new java.awt.Color(153, 255, 0));
        IDpic.setForeground(new java.awt.Color(51, 51, 255));
        IDpic.setBorderSize(2);
        IDpic.setDoubleBuffered(true);
        IDPanel.add(IDpic, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 120, 120));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.CardLayout());

        IDName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        IDName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        IDName.setText("Name");
        jPanel2.add(IDName, "card2");

        IDPanel.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 180, 60));

        IDTemp.setBackground(new java.awt.Color(255, 255, 255));
        IDTemp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI_Images/IssueID/IDTempNormal.png"))); // NOI18N
        IDPanel.add(IDTemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 211));

        IssueIDPanel.add(IDPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 410, 211));

        ClearBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI_Images/IssueID/Icon material-clear.png"))); // NOI18N
        ClearBTN.setBorder(null);
        ClearBTN.setContentAreaFilled(false);
        ClearBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ClearBTNMouseEntered(evt);
            }
        });
        ClearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBTNActionPerformed(evt);
            }
        });
        IssueIDPanel.add(ClearBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 300, 30, 30));

        Nic.setBorder(null);
        Nic.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                NicFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                NicFocusLost(evt);
            }
        });
        Nic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                NicMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                NicMouseExited(evt);
            }
        });
        Nic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                NicKeyReleased(evt);
            }
        });
        IssueIDPanel.add(Nic, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 304, 220, 20));

        NicLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI_Images/Register_PeoplePanel/TextBoxNormal.png"))); // NOI18N
        NicLBL.setDoubleBuffered(true);
        NicLBL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                NicLBLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                NicLBLMouseExited(evt);
            }
        });
        IssueIDPanel.add(NicLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 290, -1, -1));

        IssueIDBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI_Images/IssueID/IssueIDBTNNormal.png"))); // NOI18N
        IssueIDBTN.setBorder(null);
        IssueIDBTN.setContentAreaFilled(false);
        IssueIDBTN.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/UI_Images/IssueID/IssueIDBTNSelect.png"))); // NOI18N
        IssueIDBTN.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/UI_Images/IssueID/IssueIDBTNRoll.png"))); // NOI18N
        IssueIDBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                IssueIDBTNMouseEntered(evt);
            }
        });
        IssueIDBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IssueIDBTNActionPerformed(evt);
            }
        });
        IssueIDPanel.add(IssueIDBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 430, 110, 50));

        DetailsPanel.setBackground(new java.awt.Color(255, 255, 255));
        DetailsPanel.setLayout(null);

        jLabel8.setFont(new java.awt.Font("Century Schoolbook", 1, 12)); // NOI18N
        jLabel8.setText("Name of Vaccine");
        DetailsPanel.add(jLabel8);
        jLabel8.setBounds(9, 140, 103, 15);

        jLabel4.setFont(new java.awt.Font("Century Schoolbook", 1, 12)); // NOI18N
        jLabel4.setText("Nic");
        DetailsPanel.add(jLabel4);
        jLabel4.setBounds(9, 20, 21, 15);

        jLabel5.setFont(new java.awt.Font("Century Schoolbook", 1, 12)); // NOI18N
        jLabel5.setText("Status");
        DetailsPanel.add(jLabel5);
        jLabel5.setBounds(9, 50, 39, 15);

        jLabel7.setFont(new java.awt.Font("Century Schoolbook", 1, 12)); // NOI18N
        jLabel7.setText("Second Dose Date");
        DetailsPanel.add(jLabel7);
        jLabel7.setBounds(9, 110, 110, 15);

        jLabel6.setFont(new java.awt.Font("Century Schoolbook", 1, 12)); // NOI18N
        jLabel6.setText("First Dose Date");
        DetailsPanel.add(jLabel6);
        jLabel6.setBounds(9, 80, 95, 15);

        Dnic.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Dnic.setText("");
        DetailsPanel.add(Dnic);
        Dnic.setBounds(199, 10, 84, 30);

        Dstatus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Dstatus.setText("");
        DetailsPanel.add(Dstatus);
        Dstatus.setBounds(199, 40, 84, 30);

        DfDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        DfDate.setText("");
        DetailsPanel.add(DfDate);
        DfDate.setBounds(199, 70, 84, 30);

        DsDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        DsDate.setText("");
        DetailsPanel.add(DsDate);
        DsDate.setBounds(199, 100, 84, 30);

        Dvname.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Dvname.setText("");
        DetailsPanel.add(Dvname);
        Dvname.setBounds(199, 130, 86, 30);

        IssueIDPanel.add(DetailsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 60, 360, 180));

        AddImgBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI_Images/IssueID/Add_Image_icon.png"))); // NOI18N
        AddImgBTN.setBorder(null);
        AddImgBTN.setContentAreaFilled(false);
        AddImgBTN.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/UI_Images/IssueID/Add_Image_icon-Pressed.png"))); // NOI18N
        AddImgBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AddImgBTNMouseEntered(evt);
            }
        });
        AddImgBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddImgBTNActionPerformed(evt);
            }
        });
        IssueIDPanel.add(AddImgBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 350, 90, 70));

        IssueIDBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI_Images/IssueID/IssueIDBgNormal.png"))); // NOI18N
        IssueIDBG.setDoubleBuffered(true);
        IssueIDBG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                IssueIDBGMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                IssueIDBGMouseExited(evt);
            }
        });
        IssueIDPanel.add(IssueIDBG, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 5, 930, 490));

        add(IssueIDPanel, "card2");

        CheckIDPanel.setMinimumSize(new java.awt.Dimension(950, 510));
        CheckIDPanel.setOpaque(false);
        CheckIDPanel.setPreferredSize(new java.awt.Dimension(950, 510));
        CheckIDPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TempID2.setBackground(new java.awt.Color(255, 255, 255));
        TempID2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TempID2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI_Images/IssueID/IDTempNormal.png"))); // NOI18N
        TempID2.setDoubleBuffered(true);
        CheckIDPanel.add(TempID2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 66, 410, 211));

        BackChkIDBTN.setText("Back");
        BackChkIDBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackChkIDBTNActionPerformed(evt);
            }
        });
        CheckIDPanel.add(BackChkIDBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 420, -1, -1));

        TestBTN.setText("Refresh");
        TestBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestBTNActionPerformed(evt);
            }
        });
        CheckIDPanel.add(TestBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 330, -1, -1));

        MainWigdetLBL6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI_Images/DashNormalWidget/DashMainWidget.png"))); // NOI18N
        MainWigdetLBL6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MainWigdetLBL6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MainWigdetLBL6MouseExited(evt);
            }
        });
        CheckIDPanel.add(MainWigdetLBL6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 11, 930, 490));

        add(CheckIDPanel, "card3");
    }// </editor-fold>//GEN-END:initComponents

    private void IssueIDBGMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IssueIDBGMouseEntered
        IssueIDBG.setIcon(new ImageIcon("src/UI_Images/IssueID/IssueIDBGRoll.png"));
    }//GEN-LAST:event_IssueIDBGMouseEntered

    private void IssueIDBGMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IssueIDBGMouseExited
        IssueIDBG.setIcon(new ImageIcon("src/UI_Images/IssueID/IssueIDBGNormal.png"));
    }//GEN-LAST:event_IssueIDBGMouseExited

    private void NicFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NicFocusGained
        Focus = true;
        ClearBTN.setVisible(false);
        NicLBL.setIcon(new ImageIcon("src/UI_Images/Register_DosePanel/DTextBoxFocus.png"));
    }//GEN-LAST:event_NicFocusGained

    private void NicFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NicFocusLost
        Focus = false;
        NicLBL.setIcon(new ImageIcon("src/UI_Images/Register_DosePanel/DTextBoxNormal.png"));
    }//GEN-LAST:event_NicFocusLost

    private void NicMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NicMouseEntered
        if(!Focus)
        {
            NicLBL.setIcon(new ImageIcon("src/UI_Images/Register_DosePanel/DTextBoxRoll.png"));
        }
        IssueIDBG.setIcon(new ImageIcon("src/UI_Images/IssueID/IssueIDBGRoll.png"));
    }//GEN-LAST:event_NicMouseEntered

    private void NicMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NicMouseExited
        if(!Focus)
        {
            NicLBL.setIcon(new ImageIcon("src/UI_Images/Register_DosePanel/DTextBoxNormal.png"));
        }
    }//GEN-LAST:event_NicMouseExited

    private void NicLBLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NicLBLMouseEntered
        if(!Focus)
        {
            NicLBL.setIcon(new ImageIcon("src/UI_Images/Register_DosePanel/DTextBoxRoll.png"));
        }
        IssueIDBG.setIcon(new ImageIcon("src/UI_Images/IssueID/IssueIDBGRoll.png"));
    }//GEN-LAST:event_NicLBLMouseEntered

    private void NicLBLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NicLBLMouseExited
        if(!Focus)
        {
            NicLBL.setIcon(new ImageIcon("src/UI_Images/Register_DosePanel/DTextBoxNormal.png"));
        }
    }//GEN-LAST:event_NicLBLMouseExited

    public void checkid(int cid)    
    {

        sql = "SELECT * FROM vaccinationid WHERE IDnumber =?";
        
        ResultSet rs2 = null;
        try {
            pst = Conn.prepareStatement(sql);
            pst.setInt(1, cid);
            
            rs2 = pst.executeQuery();
            
            while(rs2.next())
            {
                if(rs2.getInt("IDnumber") == randomCode)
                {
                    randomCode = 0;
                    randomCode = rand.nextInt(9999999);
                    
                }

            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
         
    }
    
    private boolean checkvNic(String ChNic)    
    {

        boolean checknic = false;
        String sql4 = "SELECT * FROM vaccinationid WHERE Nic =?";
        ResultSet rs4;
        try {
            pst = Conn.prepareStatement(sql4);
            pst.setString(1, ChNic);
            
            rs4 = pst.executeQuery();
            
            if(rs4.next())
            {
                checknic = true;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
         return checknic;
    }
    
        private boolean checkvNic2(String ChNic)    
    {

        boolean checknic = false;
        String sql5 = "SELECT * FROM DoseStatus WHERE Nic =?";
        ResultSet rs5;
        try {
            pst = Conn.prepareStatement(sql5);
            pst.setString(1, ChNic);
            
            rs5 = pst.executeQuery();
            
            if(rs5.next())
            {
                checknic = true;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
         return checknic;
    }

    private void FillIdData(String nic)
    {
        

        
        if(checkvNic(nic)&&checkvNic2(nic))
        {
            java.sql.Blob blob = null;
            
            
            try 
            {
            sql = "SELECT * FROM DoseStatus WHERE Nic = ? ";
            pst = Conn.prepareStatement(sql);
            pst.setString(1, nic);
            rs = pst.executeQuery();

            
            if(rs.next())

            {

                DetailsPanel.setVisible(true);

                Dnic.setText(rs.getString("Nic"));
                Dstatus.setText("Fully Vaccinated");
                DfDate.setText(String.valueOf(rs.getDate("FirstDoseDate")));
                DsDate.setText(String.valueOf(rs.getDate("SecondDoseDate")));
                Dvname.setText(rs.getString("VName"));
            }
            } 
            catch (SQLException ex) 
            {
            Logger.getLogger(IssueID_Design.class.getName()).log(Level.SEVERE, null, ex);
            }
                    try {
                        String sql2 = "SELECT * FROM vaccinationid WHERE Nic = ? ";
                        PreparedStatement pst2;
                        ResultSet rs2 = null;
                        pst2 = Conn.prepareStatement(sql2);
                        pst2.setString(1, nic);
                        rs2 = pst2.executeQuery();
                        if(rs2.next())
                        {
                            blob = rs2.getBlob("IDcard");
                            
                        }
                        
                        InputStream in = blob.getBinaryStream();
                        BufferedImage chIDimg = ImageIO.read(in);
                        
                        IDTemp.setIcon(ResizeIDch(chIDimg,IDTemp));
                        
                        jPanel1.setVisible(false);
                        jPanel2.setVisible(false);
                        Vstatus.setVisible(false);
                        IDVaccine.setVisible(false);
                        IDno.setVisible(false);
                        IDpic.setVisible(false);
                        
                        
                    } catch (IOException | SQLException ex) {
                        Logger.getLogger(IssueID_Design.class.getName()).log(Level.SEVERE, null, ex);
                    }

        }
        
        
        
        
        else if(checkvNic2(nic)) 
        {
            randomCode = rand.nextInt(9999999);
            try 
            {
            sql = "SELECT * FROM DoseStatus WHERE Nic = ? ";
            pst = Conn.prepareStatement(sql);
            pst.setString(1, nic);
            rs = pst.executeQuery();

            
            if(rs.next())
            {
                D01 = rs.getString("FirstDoseStatus");
                D02 = rs.getString("SecondDoseStatus");

            if(D01.equals(DoseTaken) && D02.equals(DoseNotTaken))
            {
                IDTemp.setIcon(new ImageIcon("src/UI_Images/IssueID/IDTempNormal.png"));
                JOptionPane.showMessageDialog(null, "This Person not Fully Vaccinated yet..");
            
            }

            
            else if(D01.equals(DoseTaken) && D02.equals(DoseTaken))
            {
                IDTemp.setIcon(new ImageIcon("src/UI_Images/IssueID/IDTempNormal.png"));
                DetailsPanel.setVisible(true);
                
                IDName.setText(rs.getString("Name"));
                Vstatus.setText("Vaccinated");
                
                

                switch (rs.getString("VName")) {
                        case "Pfizer-BioNTech" -> IDVaccine.setText("Pfizer");
                        case "Johnson & Johnson’s Janssen" -> IDVaccine.setText("J&J Janssen");
                        case "Gamaleya/Sputnik V" -> IDVaccine.setText("Sputnik V");
                        case "Covishield (Oxford/AstraZeneca formulation)" -> IDVaccine.setText("AstraZeneca");
                        case "Sinovac CoronaVac" -> IDVaccine.setText("AstraZeneca");
                        default -> IDVaccine.setText(rs.getString("VName"));
                    }
                
                checkid(randomCode);
                IDno.setText(String.valueOf(randomCode));
                
                
                Dnic.setText(rs.getString("Nic"));
                Dstatus.setText("Fully Vaccinated");
                DfDate.setText(String.valueOf(rs.getDate("FirstDoseDate")));
                DsDate.setText(String.valueOf(rs.getDate("SecondDoseDate")));
                Dvname.setText(rs.getString("VName"));

            }
            else if(checkvNic2(nic) == false)
            {
                ClearID();
            }
            
            }
            } catch (SQLException ex) {
            Logger.getLogger(IssueID_Design.class.getName()).log(Level.SEVERE, null, ex);
        }
        }

            else
            {
                ClearID();
            }
    }
    

    
        private void ClearID()
        {
            IDpic.setIcon(null);
            IDName.setText("");
            Vstatus.setText("");
            IDVaccine.setText("");
            IDno.setText("");
            Dnic.setText("");
            Dstatus.setText("");
            DfDate.setText("");
            DsDate.setText("");
            Dvname.setText("");
            DetailsPanel.setVisible(false);
            jPanel1.setVisible(true);
            jPanel2.setVisible(true);
            Vstatus.setVisible(true);
            IDVaccine.setVisible(true);
            IDno.setVisible(true);
            IDpic.setVisible(true);
            IDTemp.setIcon(new ImageIcon("src/UI_Images/IssueID/IDTempNormal.png"));
        }
    
        private void initializeSerialPort() {
                System.out.println("Connecting to "+commPort+" with speed "+baudrate+" (check these from Arduino IDE!)");
		comPort = SerialPort.getCommPort(commPort);
		comPort.openPort();
		comPort.setBaudRate(baudrate);
                comPort.setNumDataBits(8);
                comPort.setNumStopBits(1);
                comPort.setParity(0);
                comPort.setFlowControl(0);
                
		comPort.addDataListener(new SerialPortDataListener() 
                {
			
                        @Override
			public int getListeningEvents() 
                        {
				return SerialPort.LISTENING_EVENT_DATA_AVAILABLE;
			}

			
                        @Override
			public void serialEvent(SerialPortEvent event) 
                        {
				if (event.getEventType() != SerialPort.LISTENING_EVENT_DATA_AVAILABLE) 
                                {
					System.err.println("No data on SerialPort");
					return;
				}
                                
				int bytesAvailable = comPort.bytesAvailable();
				if (bytesAvailable<1) 
                                {
					System.err.println("Can not read from SerialPort");
					return;
				}
				byte[] newData = new byte[bytesAvailable];
				int numRead = comPort.readBytes(newData, newData.length);
				// System.out.println("Read " + numRead + " bytes.");
				if (numRead > 0) {
					for (int i = 0; i < newData.length; ++i) 
                                        {
						if ((char)newData[i]=='\n'||(char)newData[i]=='\r') 
                                                {
							readline=readline.trim();
							if (readline.length()>0) 
                                                        {
                                                            receive(readline);
                                                        }
							readline="";
						}
						else 
                                                {
                                                    readline += (char)newData[i];
                                                }
					}
				}
			}
		});
	}
        
        public void receive(String line) {
		if (line==null) {
                    return;
                }
		System.out.println(line);
		if (line.startsWith("Card UID")) { // check for a value (string starting with 'Card UID')
			cuid(line.substring(10).trim().toUpperCase()); // show it in the label in the userinterface
		}
	}
        
        public void send(String s) {
		comPort.setComPortTimeouts(SerialPort.TIMEOUT_SCANNER, 0, 0);
		comPort.setComPortTimeouts(SerialPort.TIMEOUT_WRITE_BLOCKING, 100, 0);
		try{Thread.sleep(5);} catch(InterruptedException e){}
		PrintWriter pout = new PrintWriter(comPort.getOutputStream());
		pout.print(s);
		pout.flush();
	}
        
        public void cuid(String id) {
		System.out.println("cuid="+id+".");
                rfid = id;
                rftxt.setText("Rfid Scanned, Uid is "+rfid);
                FillCheckID(id);
	}
        
        
    private void connect() 
    {
    

    SerialPort port = SerialPort.getCommPort(commPort);
    

        if (port != null) {
            port.setBaudRate(9600);
            port.setNumDataBits(8);
            port.setNumStopBits(1);
            port.setParity(0);
            port.setFlowControl(0);


        port.addDataListener(new SerialPortDataListener() {
            @Override
            public int getListeningEvents() {
                return SerialPort.LISTENING_EVENT_DATA_AVAILABLE;
            }

            @Override
            public void serialEvent(SerialPortEvent serialPortEvent) {


                if (serialPortEvent.getEventType() != SerialPort.LISTENING_EVENT_DATA_AVAILABLE){
                    System.out.println("  event_type="+serialPortEvent.getEventType());
                    return;
                }


                try {
                    int len = serialPortEvent.getSerialPort().bytesAvailable();

                    byte data[] = new byte[len];
                    serialPortEvent.getSerialPort().readBytes(data, len);

                   for (int i = 0; i < data.length; ++i) {
						if ((char)data[i]=='\n'||(char)data[i]=='\r') {
							readline=readline.trim();
							if (readline.length()>0) {
                                                            receive(readline);
                                                        }
							readline="";
						}
						else {
                                                    readline += (char)data[i];
                                                }
					}               
                    System.out.println();
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
            }
        });
        boolean b = port.openPort();
        if (!b) {
            port.closePort();
        }
    }
}
        
        final JComponent[] rflbl = new JComponent[] 
        {
        rftxt
        };
        
        
    private void IssueIDBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IssueIDBTNActionPerformed
           
               /*if(comPort.isOpen())
                {
                    initializeSerialPort();
                }
                */
                connect();

                if (Nic.getText().isBlank()) 
                {
                    JOptionPane.showMessageDialog(null, "Type the nic number!");
                }
                else if(checkvNic(Nic.getText()))
                {
                    JOptionPane.showMessageDialog(null, "Vaccination ID already issued for this person!");
                }

                else
                {   

                //initializeSerialPort();

                rftxt.setText("Scan the Rfid to Assign...");

                JOptionPane.showMessageDialog(null,rflbl,"Covid Care", JOptionPane.INFORMATION_MESSAGE);


                if (JOptionPane.showConfirmDialog( null,"Confirm if you want to Assign this rfid, Uid "+rfid,"Covid Care",
                JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
                {
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            try {
                                ImageIO.write(createImage(IDPanel), "png", baos);
                            } catch (IOException ex) {
                                Logger.getLogger(IssueID_Design.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            InputStream is = new ByteArrayInputStream(baos.toByteArray());

                            try {
                            sql = "insert into vaccinationid values(?,?,?,?)";
                            pst = Conn.prepareStatement(sql);
                            //InputStream is = new FileInputStream(new File(s));         

                            pst.setString(1,Nic.getText());
                            pst.setString(2,rfid);
                            pst.setBlob(3,is);
                            pst.setInt(4,randomCode);

                            JOptionPane.showMessageDialog(null, "Vaccination Id issue successfully completed!");
                            pst.executeUpdate();
                        } catch (SQLException ex) {
                            Logger.getLogger(Register_Design.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null, ex.toString());
                        }

                }
                }
                
    }//GEN-LAST:event_IssueIDBTNActionPerformed

    private void MainWigdetLBL6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainWigdetLBL6MouseEntered
        MainWigdetLBL6.setIcon(new ImageIcon("src/UI_Images/DashRolloverWidget/DashMainWigdetRollover.png"));
    }//GEN-LAST:event_MainWigdetLBL6MouseEntered

    private void MainWigdetLBL6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainWigdetLBL6MouseExited
        MainWigdetLBL6.setIcon(new ImageIcon("src/UI_Images/DashNormalWidget/DashMainWidget.png"));
    }//GEN-LAST:event_MainWigdetLBL6MouseExited

    private void BackChkIDBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackChkIDBTNActionPerformed
        CheckIDPanel.setVisible(false);
        IssueIDPanel.setVisible(true);
    }//GEN-LAST:event_BackChkIDBTNActionPerformed

    private void CheckIDBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckIDBTNActionPerformed
 
                /*if(comPort.isOpen())
                {
                    initializeSerialPort();
                }*/
                connect();
        CheckIDPanel.setVisible(true);
        IssueIDPanel.setVisible(false);
        
        
    }//GEN-LAST:event_CheckIDBTNActionPerformed

    
    private void FillCheckID(String chrfid)
    {
        
        String sql3 = "SELECT * FROM vaccinationid WHERE Rfid =?";
        
        try {
            pst = Conn.prepareStatement(sql3);
            pst.setString(1, chrfid);
            
            ResultSet rs3;
            rs3 = pst.executeQuery();
            
            if(rs3.next())
            {
                
                java.sql.Blob blob = rs3.getBlob("IDcard");
                InputStream in = blob.getBinaryStream();
                BufferedImage chIDimg = ImageIO.read(in);
                TempID2.setIcon(ResizeIDch(chIDimg,TempID2));
                System.out.println("ID loaded...");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        } catch (IOException ex) {
            Logger.getLogger(IssueID_Design.class.getName()).log(Level.SEVERE, null, ex);
        }
         
    }
    
    private void IssueIDBTNMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IssueIDBTNMouseEntered
        IssueIDBG.setIcon(new ImageIcon("src/UI_Images/IssueID/IssueIDBGRoll.png"));
    }//GEN-LAST:event_IssueIDBTNMouseEntered

    private void CheckIDBTNMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckIDBTNMouseEntered
        IssueIDBG.setIcon(new ImageIcon("src/UI_Images/IssueID/IssueIDBGRoll.png"));
    }//GEN-LAST:event_CheckIDBTNMouseEntered

    private void TestBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestBTNActionPerformed
        //TempID2.setIcon(new ImageIcon(createImage(IDPanel)));
        //createImage(IDPanel);

        TempID2.setIcon(new ImageIcon("src/UI_Images/IssueID/IDTempNormal.png"));
    }//GEN-LAST:event_TestBTNActionPerformed

    private void PrintIDBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintIDBTNActionPerformed
            
        printComponenet(IDPanel);
    }//GEN-LAST:event_PrintIDBTNActionPerformed

    private void NicKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NicKeyReleased
        FillIdData(Nic.getText());
        
        System.out.println("Checking Nic");
        
      if(Nic.getText().isBlank() == false)
      {
          ClearBTN.setVisible(true);
      }
      else
      {
          ClearBTN.setVisible(false);
      }
    }//GEN-LAST:event_NicKeyReleased

    private void ClearBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBTNActionPerformed
        Nic.setText("");
        ClearID();
    }//GEN-LAST:event_ClearBTNActionPerformed

    private void AddImgBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddImgBTNActionPerformed
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.IMAGE", "jpg","gif","png");
        fileChooser.addChoosableFileFilter(filter);
        int result = fileChooser.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            File selectedFile = fileChooser.getSelectedFile();
            path = selectedFile.getAbsolutePath();
            IDpic.setIcon(ResizeImage(path));
            
            
        }
        else if(result == JFileChooser.CANCEL_OPTION){
            System.out.println("No Data");
        }
    }//GEN-LAST:event_AddImgBTNActionPerformed

    private void PrintIDBTNMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PrintIDBTNMouseEntered
        IssueIDBG.setIcon(new ImageIcon("src/UI_Images/IssueID/IssueIDBGRoll.png"));
    }//GEN-LAST:event_PrintIDBTNMouseEntered

    private void AddImgBTNMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddImgBTNMouseEntered
        IssueIDBG.setIcon(new ImageIcon("src/UI_Images/IssueID/IssueIDBGRoll.png"));
    }//GEN-LAST:event_AddImgBTNMouseEntered

    private void ClearBTNMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClearBTNMouseEntered
        IssueIDBG.setIcon(new ImageIcon("src/UI_Images/IssueID/IssueIDBGRoll.png"));
    }//GEN-LAST:event_ClearBTNMouseEntered

    public void printComponenet(JPanel componenet_name){

        PrinterJob pj = PrinterJob.getPrinterJob();
        pj.setJobName(" Print Component ");

        pj.setPrintable ((Graphics pg, PageFormat pf, int pageNum) -> {
            if (pageNum > 0){
                return Printable.NO_SUCH_PAGE;
            }
            
            Graphics2D g2 = (Graphics2D) pg;
            g2.translate(pf.getImageableX(), pf.getImageableY());
            componenet_name.paint(g2);
            return Printable.PAGE_EXISTS;
        });
        if (pj.printDialog() == false) {
            return;
        }

        try {
              pj.print();
        } catch (PrinterException ex) {
              // handle exception
  }
}
    
    public BufferedImage createImage(JPanel panel) 
    {
        int w = panel.getWidth();
        int h = panel.getHeight();
        BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = bi.createGraphics();
        panel.paint(g);
        g.dispose();
        return bi;
    }
    

    private ImageIcon ResizeImage(String imgPath)
        {
        ImageIcon MyImage = new ImageIcon(imgPath);
        Image img = MyImage.getImage();
        Image newImage = img.getScaledInstance(IDpic.getWidth(), IDpic.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImage);
        return image;
    }

      private ImageIcon ResizeIDch(BufferedImage imgPath,JLabel lbl)
        {
        ImageIcon MyImage = new ImageIcon(imgPath);
        Image img = MyImage.getImage();
        Image newImage = img.getScaledInstance(lbl.getWidth(), lbl.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImage);
        return image;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddImgBTN;
    private javax.swing.JButton BackChkIDBTN;
    private javax.swing.JButton CheckIDBTN;
    private javax.swing.JPanel CheckIDPanel;
    private javax.swing.JButton ClearBTN;
    private javax.swing.JPanel DetailsPanel;
    private javax.swing.JLabel DfDate;
    private javax.swing.JLabel Dnic;
    private javax.swing.JLabel DsDate;
    private javax.swing.JLabel Dstatus;
    private javax.swing.JLabel Dvname;
    private javax.swing.JLabel IDName;
    private javax.swing.JPanel IDPanel;
    private javax.swing.JLabel IDTemp;
    private javax.swing.JLabel IDVaccine;
    private javax.swing.JLabel IDno;
    private com.raven.avatar.ImageAvatar IDpic;
    private javax.swing.JLabel IssueIDBG;
    private javax.swing.JButton IssueIDBTN;
    private javax.swing.JPanel IssueIDPanel;
    private javax.swing.JLabel MainWigdetLBL6;
    private javax.swing.JTextField Nic;
    private javax.swing.JLabel NicLBL;
    private javax.swing.JButton PrintIDBTN;
    private javax.swing.JLabel TempID2;
    private javax.swing.JButton TestBTN;
    private javax.swing.JLabel Vstatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
